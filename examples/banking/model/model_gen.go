// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/kode4food/timebox/id"
)

type Event interface {
	IsEvent()
}

type AccountOpened struct {
	AccountID id.ID  `json:"accountID"`
	Owner     string `json:"owner"`
}

func (AccountOpened) IsEvent() {}

type AccountStatus struct {
	AccountID id.ID  `json:"accountID"`
	Balance   *Money `json:"balance"`
}

type MoneyDeposited struct {
	AccountID       id.ID  `json:"accountID"`
	DepositedAmount *Money `json:"depositedAmount"`
}

func (MoneyDeposited) IsEvent() {}

type MoneyWithdrawn struct {
	AccountID       id.ID  `json:"accountID"`
	WithdrawnAmount *Money `json:"withdrawnAmount"`
}

func (MoneyWithdrawn) IsEvent() {}

type OpenAccount struct {
	Owner string `json:"owner"`
}

type TransferMoney struct {
	AccountID id.ID  `json:"accountID"`
	Amount    *Money `json:"amount"`
}

type Currency string

const (
	CurrencyEur Currency = "EUR"
	CurrencyUsd Currency = "USD"
	CurrencyGbp Currency = "GBP"
)

var AllCurrency = []Currency{
	CurrencyEur,
	CurrencyUsd,
	CurrencyGbp,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyEur, CurrencyUsd, CurrencyGbp:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
