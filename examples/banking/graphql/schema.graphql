scalar AccountID
scalar CustomerID
scalar Money

enum Currency {
    EUR
    USD
    GBP
}

union Event = AccountOpened | MoneyDeposited | MoneyWithdrawn

type AccountOpened {
    accountID: AccountID!
    owner: String!
}

type MoneyDeposited {
    accountID: AccountID!
    depositedAmount: Money!
}

type MoneyWithdrawn {
    accountID: AccountID!
    withdrawnAmount: Money!
}

type AccountStatus {
    accountID: AccountID!
    balance: Money!
}

input OpenAccount {
    owner: String!
}

input TransferMoney {
    accountID: AccountID!
    amount: Money!
}

type Query {
    accountStatus(accountID: AccountID!): AccountStatus!
}

type Mutation {
    openAccount(input: OpenAccount!): AccountID!
    depositMoney(input: TransferMoney!): AccountID!
    withdrawMoney(input: TransferMoney!): AccountID!
}
